name: Build, Release, and Dockerize Ani-RSS

on:
  push:
    branches:
      - master # 或者您的主分支名
    # 只有当 master 分支的推送不全是以下被忽略的文件时才触发
    paths-ignore:
      - '**.md'        # 忽略所有 Markdown 文件的更改 (README.md, UPDATE.md, docs/*.md 等)
      - 'LICENSE'
      - '.gitignore'
      - 'docs/**'       # 忽略 docs 文件夹下的所有更改
      # 您可以根据需要添加其他希望忽略的文件或目录模式
      # 例如：
      # - 'images/**'
      # - '*.txt'

    tags:
      - 'v*'   # 例如 v1.0, v0.1.0 (标签推送不受 paths-ignore 影响，总是触发)
  workflow_dispatch: # 允许手动触发

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 必需，用于创建 Release
      # packages: write # 如果推送到 GitHub Packages (这里是 Docker Hub)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # 对于 paths-ignore，通常不需要获取完整历史记录 fetch-depth: 0
        # 但如果您的某些脚本依赖完整的 git 历史，可以取消注释
        # with:
        #   fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # 确认与您的 ui 项目兼容
          # cache: 'npm'

      - name: Set up pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
          # run_install: false

      - name: Install jq (JSON processor)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Make shell scripts executable
        run: |
          chmod +x ./package.sh
          chmod +x ./package-win.sh

      - name: Run build scripts and prepare release info
        id: build_info
        run: |
          echo "Starting package.sh..."
          bash ./package.sh
          echo "package.sh finished."

          echo "Starting package-win.sh..."
          bash ./package-win.sh
          echo "package-win.sh finished."

          time_now=$(date +%s%3N)
          version_from_pom=$(cat pom.xml | grep -oPm1 '(?<=<version>).*?(?=</version>)')
          
          echo "Creating info.json..."
          echo "{\"time\":$time_now,\"version\":\"$version_from_pom\"}" > info.json
          
          if [ -f UPDATE.md ]; then
            jq --arg content "$(cat UPDATE.md)" '.markdown = $content' info.json > info.json.tmp && mv info.json.tmp info.json
            echo "UPDATE.md content added to info.json."
          else
            echo "UPDATE.md not found, using default markdown content in info.json."
            jq '.markdown = "No specific update information for this release."' info.json > info.json.tmp && mv info.json.tmp info.json
          fi
          
          echo "RELEASE_VERSION=v$version_from_pom" >> $GITHUB_ENV
          echo "POM_VERSION=$version_from_pom" >> $GITHUB_ENV

          echo "Build scripts and info preparation complete."
          echo "RELEASE_VERSION: v$version_from_pom"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Ani-RSS ${{ env.RELEASE_VERSION }}
          draft: ${{ github.ref_type != 'tag' }}
          prerelease: ${{ github.ref_type != 'tag' || contains(env.RELEASE_VERSION, '-beta') || contains(env.RELEASE_VERSION, '-rc') }}
          body_path: UPDATE.md
          tag_name: ${{ env.RELEASE_VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_unmatched_files: true
          files: |
            ./target/ani-rss-jar-with-dependencies.jar
            ./target/ani-rss-jar-with-dependencies.jar.md5
            ./target/ani-rss-launcher.exe
            ./target/ani-rss-launcher.exe.md5
            ./target/ani-rss.win.x86_64.zip
            ./target/ani-rss.win.x86_64.zip.md5
            ./info.json
            # src/main/resources/application.properties.template # 如果您决定不包含这个，就注释掉或删除
            linux/install-ani-rss.sh
            linux/ani-rss.sh
            linux/uninstall-ani-rss.sh

      # Docker steps
      - name: Set up QEMU
        if: github.ref_type == 'tag'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: github.ref_type == 'tag'
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.ref_type == 'tag'
        uses: docker/login-action@v3
        with:
          username: naxbr
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        if: github.ref_type == 'tag'
        uses: docker/build-push-action@v6
        with:
          context: ./
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            naxbr/ani-rss:latest
            naxbr/ani-rss:${{ env.POM_VERSION }}
