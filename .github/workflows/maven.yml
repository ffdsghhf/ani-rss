name: Build, Release, and Dockerize Ani-RSS

on:
  push:
    branches:
      - master # 或者您的主分支名
    tags:
      - 'v*'   # 例如 v1.0, v0.1.0
  workflow_dispatch: # 允许手动触发

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 必需，用于创建 Release
      # packages: write # 如果推送到 GitHub Packages (这里是 Docker Hub)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # 确认与您的 ui 项目兼容
          cache: 'pnpm'
          cache-dependency-path: ui/pnpm-lock.yaml # 确认此路径

      - name: Install pnpm
        run: npm install -g pnpm # 与您的 package.sh 行为一致

      - name: Install jq (JSON processor)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Make shell scripts executable
        run: |
          chmod +x ./package.sh
          chmod +x ./package-win.sh
          # 如果 linux 目录下的脚本也需要执行权限被保留，可以添加：
          # chmod +x ./linux/*.sh

      - name: Run build scripts and prepare release info
        id: build_info # 给这个步骤一个id，方便后续引用其输出（如果需要）
        run: |
          echo "Starting package.sh..."
          bash ./package.sh
          echo "package.sh finished."

          echo "Starting package-win.sh..."
          bash ./package-win.sh
          echo "package-win.sh finished."

          time_now=$(date +%s%3N)
          version_from_pom=$(cat pom.xml | grep -oPm1 '(?<=<version>).*?(?=</version>)')
          
          echo "Creating info.json..."
          echo "{\"time\":$time_now,\"version\":\"$version_from_pom\"}" > info.json
          
          if [ -f UPDATE.md ]; then
            # 使用临时文件确保 jq 操作的原子性，并处理特殊字符
            jq --arg content "$(cat UPDATE.md)" '.markdown = $content' info.json > info.json.tmp && mv info.json.tmp info.json
            echo "UPDATE.md content added to info.json."
          else
            echo "UPDATE.md not found, skipping markdown content in info.json."
            # 可选：如果 UPDATE.md 不存在，给 markdown 赋一个默认值或空字符串
            jq '.markdown = "No update information provided."' info.json > info.json.tmp && mv info.json.tmp info.json
          fi
          
          # 设置环境变量供后续步骤使用
          # RELEASE_VERSION 将是类似 "v1.2.72"
          echo "RELEASE_VERSION=v$version_from_pom" >> $GITHUB_ENV
          echo "POM_VERSION=$version_from_pom" >> $GITHUB_ENV # 不带 "v" 的版本，如果其他地方需要

          echo "Build scripts and info preparation complete."
          echo "RELEASE_VERSION: v$version_from_pom"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') # 仅在打v*标签时创建正式Release
        with:
          name: Ani-RSS ${{ env.RELEASE_VERSION }} # 例如 "Ani-RSS v1.2.72"
          # 如果是分支推送，并且不是预期的发布分支/标签，可以设置为草稿
          draft: ${{ github.event_name == 'push' && github.ref_type != 'tag' }}
          # 如果是草稿，或者标签包含beta/rc，则设为预发布
          prerelease: ${{ (github.event_name == 'push' && github.ref_type != 'tag') || contains(env.RELEASE_VERSION, '-beta') || contains(env.RELEASE_VERSION, '-rc') }}
          body_path: UPDATE.md # 确保 UPDATE.md 存在，或已在上面步骤处理其缺失
          tag_name: ${{ env.RELEASE_VERSION }} # 使用带 "v" 的版本作为标签名
          # append_body: false # 默认为 false
          token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_unmatched_files: true # 如果有文件没找到，则失败
          files: |
            ./target/ani-rss-jar-with-dependencies.jar
            ./target/ani-rss-jar-with-dependencies.jar.md5
            ./target/ani-rss-launcher.exe
            ./target/ani-rss-launcher.exe.md5
            ./target/ani-rss.win.x86_64.zip
            ./target/ani-rss.win.x86_64.zip.md5
            ./info.json
            src/main/resources/application.properties.template # <--- 确认此路径和文件名
            linux/install-ani-rss.sh
            linux/ani-rss.sh
            linux/uninstall-ani-rss.sh

      # Docker steps
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name == 'push' && github.ref_type == 'tag' # 仅在打标签时登录和推送 Docker 镜像
        uses: docker/login-action@v3
        with:
          username: naxbr # 您的 Docker Hub 用户名
          password: ${{ secrets.DOCKER_PASSWORD }} # 在 GitHub Secrets 中配置 DOCKER_PASSWORD

      - name: Build and push Docker image
        if: github.event_name == 'push' && github.ref_type == 'tag' # 仅在打标签时构建和推送 Docker 镜像
        uses: docker/build-push-action@v6
        with:
          context: ./
          file: ./docker/Dockerfile # 确认 Dockerfile 路径
          platforms: linux/amd64,linux/arm64
          push: true # 推送到 Docker Hub
          tags: |
            naxbr/ani-rss:latest
            naxbr/ani-rss:${{ env.POM_VERSION }} # Docker 标签通常不带 "v"，使用 POM_VERSION
